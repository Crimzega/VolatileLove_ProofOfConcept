//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/Scripts/VoLov/Controls/KaminagaControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace Sulvic.VoLov.Controls
{
	public partial class @KaminagaControls: IInputActionCollection2, IDisposable
	{
		public InputActionAsset asset { get; }
		public @KaminagaControls()
		{
			asset = InputActionAsset.FromJson(@"{
	""name"": ""KaminagaControls"",
	""maps"": [
		{
			""name"": ""KeyMouse"",
			""id"": ""de96ed13-8d8b-48cf-83ca-7b3cb6823186"",
			""actions"": [
				{
					""name"": ""WalkForward"",
					""type"": ""Button"",
					""id"": ""2e84f1d6-9079-4cf3-a7d9-fa6fae8cb118"",
					""expectedControlType"": ""Button"",
					""processors"": """",
					""interactions"": """",
					""initialStateCheck"": false
				},
				{
					""name"": ""WalkBackward"",
					""type"": ""Button"",
					""id"": ""95040241-7da6-4a92-a7ec-1c7a42805a33"",
					""expectedControlType"": ""Button"",
					""processors"": """",
					""interactions"": """",
					""initialStateCheck"": false
				},
				{
					""name"": ""Sprint"",
					""type"": ""Button"",
					""id"": ""6c207454-1c8d-4a14-a076-7df1f69ad68c"",
					""expectedControlType"": ""Button"",
					""processors"": """",
					""interactions"": ""Press"",
					""initialStateCheck"": false
				}
			],
			""bindings"": [
				{
					""name"": """",
					""id"": ""37752209-073f-4075-9f46-eea670e6f178"",
					""path"": ""<Keyboard>/w"",
					""interactions"": """",
					""processors"": """",
					""groups"": ""Keyboard"",
					""action"": ""WalkForward"",
					""isComposite"": false,
					""isPartOfComposite"": false
				},
				{
					""name"": """",
					""id"": ""1210f78a-1d97-4a37-8efc-5ffa9cfff2fb"",
					""path"": ""<Keyboard>/s"",
					""interactions"": """",
					""processors"": """",
					""groups"": ""Keyboard"",
					""action"": ""WalkBackward"",
					""isComposite"": false,
					""isPartOfComposite"": false
				},
				{
					""name"": """",
					""id"": ""23efe235-b9bb-4ac1-886c-0cb307937d34"",
					""path"": ""<Keyboard>/leftShift"",
					""interactions"": """",
					""processors"": """",
					""groups"": """",
					""action"": ""Sprint"",
					""isComposite"": false,
					""isPartOfComposite"": false
				}
			]
		},
		{
			""name"": ""Gamepad"",
			""id"": ""d381373d-b50b-4420-8a8b-517d4aeacc00"",
			""actions"": [
				{
					""name"": ""WalkForward"",
					""type"": ""Value"",
					""id"": ""9b703e51-3b66-4c87-8687-c8100e4da524"",
					""expectedControlType"": ""Axis"",
					""processors"": ""AxisDeadzone"",
					""interactions"": """",
					""initialStateCheck"": true
				},
				{
					""name"": ""WalkBackward"",
					""type"": ""Value"",
					""id"": ""1ad9a27a-b5da-41c2-9c09-6a987feded60"",
					""expectedControlType"": ""Axis"",
					""processors"": ""AxisDeadzone"",
					""interactions"": """",
					""initialStateCheck"": true
				},
				{
					""name"": ""Sprint"",
					""type"": ""Button"",
					""id"": ""5a6509e8-520a-475d-b3e9-78a7d1c4fc9f"",
					""expectedControlType"": ""Button"",
					""processors"": """",
					""interactions"": """",
					""initialStateCheck"": false
				}
			],
			""bindings"": [
				{
					""name"": """",
					""id"": ""32164e93-efc3-4029-98bd-23b1322871d1"",
					""path"": ""<Gamepad>/leftStick/up"",
					""interactions"": """",
					""processors"": """",
					""groups"": ""Gamepad"",
					""action"": ""WalkForward"",
					""isComposite"": false,
					""isPartOfComposite"": false
				},
				{
					""name"": """",
					""id"": ""24a46fc1-f7b2-4678-884e-059cb893adfc"",
					""path"": ""<Gamepad>/leftStick/down"",
					""interactions"": """",
					""processors"": """",
					""groups"": """",
					""action"": ""WalkBackward"",
					""isComposite"": false,
					""isPartOfComposite"": false
				},
				{
					""name"": """",
					""id"": ""41d5e859-7ed1-437d-8abe-c8994dc47b21"",
					""path"": ""<Gamepad>/leftShoulder"",
					""interactions"": ""Press"",
					""processors"": """",
					""groups"": """",
					""action"": ""Sprint"",
					""isComposite"": false,
					""isPartOfComposite"": false
				}
			]
		}
	],
	""controlSchemes"": [
		{
			""name"": ""Keyboard"",
			""bindingGroup"": ""Keyboard"",
			""devices"": [
				{
					""devicePath"": ""<Keyboard>"",
					""isOptional"": false,
					""isOR"": false
				},
				{
					""devicePath"": ""<VirtualMouse>"",
					""isOptional"": false,
					""isOR"": false
				}
			]
		},
		{
			""name"": ""Gamepad"",
			""bindingGroup"": ""Gamepad"",
			""devices"": [
				{
					""devicePath"": ""<Gamepad>"",
					""isOptional"": true,
					""isOR"": false
				}
			]
		}
	]
}");
			// KeyMouse
			m_KeyMouse = asset.FindActionMap("KeyMouse", throwIfNotFound: true);
			m_KeyMouse_WalkForward = m_KeyMouse.FindAction("WalkForward", throwIfNotFound: true);
			m_KeyMouse_WalkBackward = m_KeyMouse.FindAction("WalkBackward", throwIfNotFound: true);
			m_KeyMouse_Sprint = m_KeyMouse.FindAction("Sprint", throwIfNotFound: true);
			// Gamepad
			m_Gamepad = asset.FindActionMap("Gamepad", throwIfNotFound: true);
			m_Gamepad_WalkForward = m_Gamepad.FindAction("WalkForward", throwIfNotFound: true);
			m_Gamepad_WalkBackward = m_Gamepad.FindAction("WalkBackward", throwIfNotFound: true);
			m_Gamepad_Sprint = m_Gamepad.FindAction("Sprint", throwIfNotFound: true);
		}

		public void Dispose()
		{
			UnityEngine.Object.Destroy(asset);
		}

		public InputBinding? bindingMask
		{
			get => asset.bindingMask;
			set => asset.bindingMask = value;
		}

		public ReadOnlyArray<InputDevice>? devices
		{
			get => asset.devices;
			set => asset.devices = value;
		}

		public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

		public bool Contains(InputAction action)
		{
			return asset.Contains(action);
		}

		public IEnumerator<InputAction> GetEnumerator()
		{
			return asset.GetEnumerator();
		}

		IEnumerator IEnumerable.GetEnumerator()
		{
			return GetEnumerator();
		}

		public void Enable()
		{
			asset.Enable();
		}

		public void Disable()
		{
			asset.Disable();
		}

		public IEnumerable<InputBinding> bindings => asset.bindings;

		public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
		{
			return asset.FindAction(actionNameOrId, throwIfNotFound);
		}

		public int FindBinding(InputBinding bindingMask, out InputAction action)
		{
			return asset.FindBinding(bindingMask, out action);
		}

		// KeyMouse
		private readonly InputActionMap m_KeyMouse;
		private List<IKeyMouseActions> m_KeyMouseActionsCallbackInterfaces = new List<IKeyMouseActions>();
		private readonly InputAction m_KeyMouse_WalkForward;
		private readonly InputAction m_KeyMouse_WalkBackward;
		private readonly InputAction m_KeyMouse_Sprint;
		public struct KeyMouseActions
		{
			private @KaminagaControls m_Wrapper;
			public KeyMouseActions(@KaminagaControls wrapper) { m_Wrapper = wrapper; }
			public InputAction @WalkForward => m_Wrapper.m_KeyMouse_WalkForward;
			public InputAction @WalkBackward => m_Wrapper.m_KeyMouse_WalkBackward;
			public InputAction @Sprint => m_Wrapper.m_KeyMouse_Sprint;
			public InputActionMap Get() { return m_Wrapper.m_KeyMouse; }
			public void Enable() { Get().Enable(); }
			public void Disable() { Get().Disable(); }
			public bool enabled => Get().enabled;
			public static implicit operator InputActionMap(KeyMouseActions set) { return set.Get(); }
			public void AddCallbacks(IKeyMouseActions instance)
			{
				if (instance == null || m_Wrapper.m_KeyMouseActionsCallbackInterfaces.Contains(instance)) return;
				m_Wrapper.m_KeyMouseActionsCallbackInterfaces.Add(instance);
				@WalkForward.started += instance.OnWalkForward;
				@WalkForward.performed += instance.OnWalkForward;
				@WalkForward.canceled += instance.OnWalkForward;
				@WalkBackward.started += instance.OnWalkBackward;
				@WalkBackward.performed += instance.OnWalkBackward;
				@WalkBackward.canceled += instance.OnWalkBackward;
				@Sprint.started += instance.OnSprint;
				@Sprint.performed += instance.OnSprint;
				@Sprint.canceled += instance.OnSprint;
			}

			private void UnregisterCallbacks(IKeyMouseActions instance)
			{
				@WalkForward.started -= instance.OnWalkForward;
				@WalkForward.performed -= instance.OnWalkForward;
				@WalkForward.canceled -= instance.OnWalkForward;
				@WalkBackward.started -= instance.OnWalkBackward;
				@WalkBackward.performed -= instance.OnWalkBackward;
				@WalkBackward.canceled -= instance.OnWalkBackward;
				@Sprint.started -= instance.OnSprint;
				@Sprint.performed -= instance.OnSprint;
				@Sprint.canceled -= instance.OnSprint;
			}

			public void RemoveCallbacks(IKeyMouseActions instance)
			{
				if (m_Wrapper.m_KeyMouseActionsCallbackInterfaces.Remove(instance))
					UnregisterCallbacks(instance);
			}

			public void SetCallbacks(IKeyMouseActions instance)
			{
				foreach (var item in m_Wrapper.m_KeyMouseActionsCallbackInterfaces)
					UnregisterCallbacks(item);
				m_Wrapper.m_KeyMouseActionsCallbackInterfaces.Clear();
				AddCallbacks(instance);
			}
		}
		public KeyMouseActions @KeyMouse => new KeyMouseActions(this);

		// Gamepad
		private readonly InputActionMap m_Gamepad;
		private List<IGamepadActions> m_GamepadActionsCallbackInterfaces = new List<IGamepadActions>();
		private readonly InputAction m_Gamepad_WalkForward;
		private readonly InputAction m_Gamepad_WalkBackward;
		private readonly InputAction m_Gamepad_Sprint;
		public struct GamepadActions
		{
			private @KaminagaControls m_Wrapper;
			public GamepadActions(@KaminagaControls wrapper) { m_Wrapper = wrapper; }
			public InputAction @WalkForward => m_Wrapper.m_Gamepad_WalkForward;
			public InputAction @WalkBackward => m_Wrapper.m_Gamepad_WalkBackward;
			public InputAction @Sprint => m_Wrapper.m_Gamepad_Sprint;
			public InputActionMap Get() { return m_Wrapper.m_Gamepad; }
			public void Enable() { Get().Enable(); }
			public void Disable() { Get().Disable(); }
			public bool enabled => Get().enabled;
			public static implicit operator InputActionMap(GamepadActions set) { return set.Get(); }
			public void AddCallbacks(IGamepadActions instance)
			{
				if (instance == null || m_Wrapper.m_GamepadActionsCallbackInterfaces.Contains(instance)) return;
				m_Wrapper.m_GamepadActionsCallbackInterfaces.Add(instance);
				@WalkForward.started += instance.OnWalkForward;
				@WalkForward.performed += instance.OnWalkForward;
				@WalkForward.canceled += instance.OnWalkForward;
				@WalkBackward.started += instance.OnWalkBackward;
				@WalkBackward.performed += instance.OnWalkBackward;
				@WalkBackward.canceled += instance.OnWalkBackward;
				@Sprint.started += instance.OnSprint;
				@Sprint.performed += instance.OnSprint;
				@Sprint.canceled += instance.OnSprint;
			}

			private void UnregisterCallbacks(IGamepadActions instance)
			{
				@WalkForward.started -= instance.OnWalkForward;
				@WalkForward.performed -= instance.OnWalkForward;
				@WalkForward.canceled -= instance.OnWalkForward;
				@WalkBackward.started -= instance.OnWalkBackward;
				@WalkBackward.performed -= instance.OnWalkBackward;
				@WalkBackward.canceled -= instance.OnWalkBackward;
				@Sprint.started -= instance.OnSprint;
				@Sprint.performed -= instance.OnSprint;
				@Sprint.canceled -= instance.OnSprint;
			}

			public void RemoveCallbacks(IGamepadActions instance)
			{
				if (m_Wrapper.m_GamepadActionsCallbackInterfaces.Remove(instance))
					UnregisterCallbacks(instance);
			}

			public void SetCallbacks(IGamepadActions instance)
			{
				foreach (var item in m_Wrapper.m_GamepadActionsCallbackInterfaces)
					UnregisterCallbacks(item);
				m_Wrapper.m_GamepadActionsCallbackInterfaces.Clear();
				AddCallbacks(instance);
			}
		}
		public GamepadActions @Gamepad => new GamepadActions(this);
		private int m_KeyboardSchemeIndex = -1;
		public InputControlScheme KeyboardScheme
		{
			get
			{
				if (m_KeyboardSchemeIndex == -1) m_KeyboardSchemeIndex = asset.FindControlSchemeIndex("Keyboard");
				return asset.controlSchemes[m_KeyboardSchemeIndex];
			}
		}
		private int m_GamepadSchemeIndex = -1;
		public InputControlScheme GamepadScheme
		{
			get
			{
				if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
				return asset.controlSchemes[m_GamepadSchemeIndex];
			}
		}
		public interface IKeyMouseActions
		{
			void OnWalkForward(InputAction.CallbackContext context);
			void OnWalkBackward(InputAction.CallbackContext context);
			void OnSprint(InputAction.CallbackContext context);
		}
		public interface IGamepadActions
		{
			void OnWalkForward(InputAction.CallbackContext context);
			void OnWalkBackward(InputAction.CallbackContext context);
			void OnSprint(InputAction.CallbackContext context);
		}
	}
}
